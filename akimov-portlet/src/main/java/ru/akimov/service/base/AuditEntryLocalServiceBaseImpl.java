package ru.akimov.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import ru.akimov.model.impl.AuditEntryModelImpl;
import ru.akimov.service.AuditEntryLocalServiceUtil;
import ru.akimov.service.EntityFieldChangeLocalService;
import ru.akimov.service.FooLocalService;
import ru.akimov.service.PersonLocalService;
import ru.akimov.service.impl.AuditEntryLocalServiceImpl;
import ru.akimov.service.persistence.AuditEntryPersistence;
import ru.akimov.service.persistence.EntityFieldChangePersistence;
import ru.akimov.service.persistence.FooPersistence;
import ru.akimov.service.persistence.PersonPersistence;
import ru.akimov.model.AuditEntry;
import ru.akimov.service.AuditEntryLocalService;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the audit entry local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link AuditEntryLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AuditEntryLocalServiceImpl
 * @see AuditEntryLocalServiceUtil
 * @generated
 */
public abstract class AuditEntryLocalServiceBaseImpl
    extends BaseLocalServiceImpl implements AuditEntryLocalService,
        IdentifiableBean {
    @BeanReference(type = AuditEntryLocalService.class)
    protected AuditEntryLocalService auditEntryLocalService;
    @BeanReference(type = AuditEntryPersistence.class)
    protected AuditEntryPersistence auditEntryPersistence;
    @BeanReference(type = EntityFieldChangeLocalService.class)
    protected EntityFieldChangeLocalService entityFieldChangeLocalService;
    @BeanReference(type = EntityFieldChangePersistence.class)
    protected EntityFieldChangePersistence entityFieldChangePersistence;
    @BeanReference(type = FooLocalService.class)
    protected FooLocalService fooLocalService;
    @BeanReference(type = FooPersistence.class)
    protected FooPersistence fooPersistence;
    @BeanReference(type = PersonLocalService.class)
    protected PersonLocalService personLocalService;
    @BeanReference(type = PersonPersistence.class)
    protected PersonPersistence personPersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private AuditEntryLocalServiceClpInvoker _clpInvoker = new AuditEntryLocalServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link ru.akimov.service.AuditEntryLocalServiceUtil} to access the audit entry local service.
     */

    /**
     * Adds the audit entry to the database. Also notifies the appropriate model listeners.
     *
     * @param auditEntry the audit entry
     * @return the audit entry that was added
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public AuditEntry addAuditEntry(AuditEntry auditEntry)
        throws SystemException {
        auditEntry.setNew(true);

        return auditEntryPersistence.update(auditEntry);
    }

    /**
     * Creates a new audit entry with the primary key. Does not add the audit entry to the database.
     *
     * @param auditEntryId the primary key for the new audit entry
     * @return the new audit entry
     */
    @Override
    public AuditEntry createAuditEntry(int auditEntryId) {
        return auditEntryPersistence.create(auditEntryId);
    }

    /**
     * Deletes the audit entry with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param auditEntryId the primary key of the audit entry
     * @return the audit entry that was removed
     * @throws PortalException if a audit entry with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public AuditEntry deleteAuditEntry(int auditEntryId)
        throws PortalException, SystemException {
        return auditEntryPersistence.remove(auditEntryId);
    }

    /**
     * Deletes the audit entry from the database. Also notifies the appropriate model listeners.
     *
     * @param auditEntry the audit entry
     * @return the audit entry that was removed
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public AuditEntry deleteAuditEntry(AuditEntry auditEntry)
        throws SystemException {
        return auditEntryPersistence.remove(auditEntry);
    }

    @Override
    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(AuditEntry.class,
            clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return auditEntryPersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link AuditEntryModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return auditEntryPersistence.findWithDynamicQuery(dynamicQuery, start,
            end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link AuditEntryModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return auditEntryPersistence.findWithDynamicQuery(dynamicQuery, start,
            end, orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return auditEntryPersistence.countWithDynamicQuery(dynamicQuery);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @param projection the projection to apply to the query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery,
        Projection projection) throws SystemException {
        return auditEntryPersistence.countWithDynamicQuery(dynamicQuery,
            projection);
    }

    @Override
    public AuditEntry fetchAuditEntry(int auditEntryId)
        throws SystemException {
        return auditEntryPersistence.fetchByPrimaryKey(auditEntryId);
    }

    /**
     * Returns the audit entry with the primary key.
     *
     * @param auditEntryId the primary key of the audit entry
     * @return the audit entry
     * @throws PortalException if a audit entry with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public AuditEntry getAuditEntry(int auditEntryId)
        throws PortalException, SystemException {
        return auditEntryPersistence.findByPrimaryKey(auditEntryId);
    }

    @Override
    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return auditEntryPersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns a range of all the audit entries.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link AuditEntryModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param start the lower bound of the range of audit entries
     * @param end the upper bound of the range of audit entries (not inclusive)
     * @return the range of audit entries
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<AuditEntry> getAuditEntries(int start, int end)
        throws SystemException {
        return auditEntryPersistence.findAll(start, end);
    }

    /**
     * Returns the number of audit entries.
     *
     * @return the number of audit entries
     * @throws SystemException if a system exception occurred
     */
    @Override
    public int getAuditEntriesCount() throws SystemException {
        return auditEntryPersistence.countAll();
    }

    /**
     * Updates the audit entry in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param auditEntry the audit entry
     * @return the audit entry that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public AuditEntry updateAuditEntry(AuditEntry auditEntry)
        throws SystemException {
        return auditEntryPersistence.update(auditEntry);
    }

    /**
     * Returns the audit entry local service.
     *
     * @return the audit entry local service
     */
    public AuditEntryLocalService getAuditEntryLocalService() {
        return auditEntryLocalService;
    }

    /**
     * Sets the audit entry local service.
     *
     * @param auditEntryLocalService the audit entry local service
     */
    public void setAuditEntryLocalService(
        AuditEntryLocalService auditEntryLocalService) {
        this.auditEntryLocalService = auditEntryLocalService;
    }

    /**
     * Returns the audit entry persistence.
     *
     * @return the audit entry persistence
     */
    public AuditEntryPersistence getAuditEntryPersistence() {
        return auditEntryPersistence;
    }

    /**
     * Sets the audit entry persistence.
     *
     * @param auditEntryPersistence the audit entry persistence
     */
    public void setAuditEntryPersistence(
        AuditEntryPersistence auditEntryPersistence) {
        this.auditEntryPersistence = auditEntryPersistence;
    }

    /**
     * Returns the entity field change local service.
     *
     * @return the entity field change local service
     */
    public EntityFieldChangeLocalService getEntityFieldChangeLocalService() {
        return entityFieldChangeLocalService;
    }

    /**
     * Sets the entity field change local service.
     *
     * @param entityFieldChangeLocalService the entity field change local service
     */
    public void setEntityFieldChangeLocalService(
        EntityFieldChangeLocalService entityFieldChangeLocalService) {
        this.entityFieldChangeLocalService = entityFieldChangeLocalService;
    }

    /**
     * Returns the entity field change persistence.
     *
     * @return the entity field change persistence
     */
    public EntityFieldChangePersistence getEntityFieldChangePersistence() {
        return entityFieldChangePersistence;
    }

    /**
     * Sets the entity field change persistence.
     *
     * @param entityFieldChangePersistence the entity field change persistence
     */
    public void setEntityFieldChangePersistence(
        EntityFieldChangePersistence entityFieldChangePersistence) {
        this.entityFieldChangePersistence = entityFieldChangePersistence;
    }

    /**
     * Returns the foo local service.
     *
     * @return the foo local service
     */
    public FooLocalService getFooLocalService() {
        return fooLocalService;
    }

    /**
     * Sets the foo local service.
     *
     * @param fooLocalService the foo local service
     */
    public void setFooLocalService(
        FooLocalService fooLocalService) {
        this.fooLocalService = fooLocalService;
    }

    /**
     * Returns the foo persistence.
     *
     * @return the foo persistence
     */
    public FooPersistence getFooPersistence() {
        return fooPersistence;
    }

    /**
     * Sets the foo persistence.
     *
     * @param fooPersistence the foo persistence
     */
    public void setFooPersistence(FooPersistence fooPersistence) {
        this.fooPersistence = fooPersistence;
    }

    /**
     * Returns the person local service.
     *
     * @return the person local service
     */
    public PersonLocalService getPersonLocalService() {
        return personLocalService;
    }

    /**
     * Sets the person local service.
     *
     * @param personLocalService the person local service
     */
    public void setPersonLocalService(
        PersonLocalService personLocalService) {
        this.personLocalService = personLocalService;
    }

    /**
     * Returns the person persistence.
     *
     * @return the person persistence
     */
    public PersonPersistence getPersonPersistence() {
        return personPersistence;
    }

    /**
     * Sets the person persistence.
     *
     * @param personPersistence the person persistence
     */
    public void setPersonPersistence(PersonPersistence personPersistence) {
        this.personPersistence = personPersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();

        PersistedModelLocalServiceRegistryUtil.register("ru.akimov.model.AuditEntry",
            auditEntryLocalService);
    }

    public void destroy() {
        PersistedModelLocalServiceRegistryUtil.unregister(
            "ru.akimov.model.AuditEntry");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return AuditEntry.class;
    }

    protected String getModelClassName() {
        return AuditEntry.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = auditEntryPersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
