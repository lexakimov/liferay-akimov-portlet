package ru.akimov.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import ru.akimov.model.EntityFieldChange;
import ru.akimov.model.EntityFieldChangeModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the EntityFieldChange service. Represents a row in the &quot;akimov_audit_field_changes&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ru.akimov.model.EntityFieldChangeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EntityFieldChangeImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EntityFieldChangeImpl
 * @see ru.akimov.model.EntityFieldChange
 * @see ru.akimov.model.EntityFieldChangeModel
 * @generated
 */
public class EntityFieldChangeModelImpl extends BaseModelImpl<EntityFieldChange>
    implements EntityFieldChangeModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a Изменение атрибута сущности model instance should use the {@link ru.akimov.model.EntityFieldChange} interface instead.
     */
    public static final String TABLE_NAME = "akimov_audit_field_changes";
    public static final Object[][] TABLE_COLUMNS = {
            { "fieldChangeId", Types.INTEGER },
            { "entryId", Types.INTEGER },
            { "fieldName", Types.VARCHAR },
            { "oldValue", Types.VARCHAR },
            { "newValue", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table akimov_audit_field_changes (fieldChangeId INTEGER not null primary key,entryId INTEGER,fieldName VARCHAR(75) null,oldValue VARCHAR(75) null,newValue VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table akimov_audit_field_changes";
    public static final String ORDER_BY_JPQL = " ORDER BY entityFieldChange.fieldChangeId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY akimov_audit_field_changes.fieldChangeId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.ru.akimov.model.EntityFieldChange"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.ru.akimov.model.EntityFieldChange"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.ru.akimov.model.EntityFieldChange"),
            true);
    public static long ENTRYID_COLUMN_BITMASK = 1L;
    public static long FIELDCHANGEID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.ru.akimov.model.EntityFieldChange"));
    private static ClassLoader _classLoader = EntityFieldChange.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            EntityFieldChange.class
        };
    private int _fieldChangeId;
    private int _entryId;
    private int _originalEntryId;
    private boolean _setOriginalEntryId;
    private String _fieldName;
    private String _oldValue;
    private String _newValue;
    private long _columnBitmask;
    private EntityFieldChange _escapedModel;

    public EntityFieldChangeModelImpl() {
    }

    @Override
    public int getPrimaryKey() {
        return _fieldChangeId;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setFieldChangeId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _fieldChangeId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return EntityFieldChange.class;
    }

    @Override
    public String getModelClassName() {
        return EntityFieldChange.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("fieldChangeId", getFieldChangeId());
        attributes.put("entryId", getEntryId());
        attributes.put("fieldName", getFieldName());
        attributes.put("oldValue", getOldValue());
        attributes.put("newValue", getNewValue());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Integer fieldChangeId = (Integer) attributes.get("fieldChangeId");

        if (fieldChangeId != null) {
            setFieldChangeId(fieldChangeId);
        }

        Integer entryId = (Integer) attributes.get("entryId");

        if (entryId != null) {
            setEntryId(entryId);
        }

        String fieldName = (String) attributes.get("fieldName");

        if (fieldName != null) {
            setFieldName(fieldName);
        }

        String oldValue = (String) attributes.get("oldValue");

        if (oldValue != null) {
            setOldValue(oldValue);
        }

        String newValue = (String) attributes.get("newValue");

        if (newValue != null) {
            setNewValue(newValue);
        }
    }

    @Override
    public int getFieldChangeId() {
        return _fieldChangeId;
    }

    @Override
    public void setFieldChangeId(int fieldChangeId) {
        _fieldChangeId = fieldChangeId;
    }

    @Override
    public int getEntryId() {
        return _entryId;
    }

    @Override
    public void setEntryId(int entryId) {
        _columnBitmask |= ENTRYID_COLUMN_BITMASK;

        if (!_setOriginalEntryId) {
            _setOriginalEntryId = true;

            _originalEntryId = _entryId;
        }

        _entryId = entryId;
    }

    public int getOriginalEntryId() {
        return _originalEntryId;
    }

    @Override
    public String getFieldName() {
        if (_fieldName == null) {
            return StringPool.BLANK;
        } else {
            return _fieldName;
        }
    }

    @Override
    public void setFieldName(String fieldName) {
        _fieldName = fieldName;
    }

    @Override
    public String getOldValue() {
        if (_oldValue == null) {
            return StringPool.BLANK;
        } else {
            return _oldValue;
        }
    }

    @Override
    public void setOldValue(String oldValue) {
        _oldValue = oldValue;
    }

    @Override
    public String getNewValue() {
        if (_newValue == null) {
            return StringPool.BLANK;
        } else {
            return _newValue;
        }
    }

    @Override
    public void setNewValue(String newValue) {
        _newValue = newValue;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public EntityFieldChange toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (EntityFieldChange) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        EntityFieldChangeImpl entityFieldChangeImpl = new EntityFieldChangeImpl();

        entityFieldChangeImpl.setFieldChangeId(getFieldChangeId());
        entityFieldChangeImpl.setEntryId(getEntryId());
        entityFieldChangeImpl.setFieldName(getFieldName());
        entityFieldChangeImpl.setOldValue(getOldValue());
        entityFieldChangeImpl.setNewValue(getNewValue());

        entityFieldChangeImpl.resetOriginalValues();

        return entityFieldChangeImpl;
    }

    @Override
    public int compareTo(EntityFieldChange entityFieldChange) {
        int primaryKey = entityFieldChange.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof EntityFieldChange)) {
            return false;
        }

        EntityFieldChange entityFieldChange = (EntityFieldChange) obj;

        int primaryKey = entityFieldChange.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        EntityFieldChangeModelImpl entityFieldChangeModelImpl = this;

        entityFieldChangeModelImpl._originalEntryId = entityFieldChangeModelImpl._entryId;

        entityFieldChangeModelImpl._setOriginalEntryId = false;

        entityFieldChangeModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<EntityFieldChange> toCacheModel() {
        EntityFieldChangeCacheModel entityFieldChangeCacheModel = new EntityFieldChangeCacheModel();

        entityFieldChangeCacheModel.fieldChangeId = getFieldChangeId();

        entityFieldChangeCacheModel.entryId = getEntryId();

        entityFieldChangeCacheModel.fieldName = getFieldName();

        String fieldName = entityFieldChangeCacheModel.fieldName;

        if ((fieldName != null) && (fieldName.length() == 0)) {
            entityFieldChangeCacheModel.fieldName = null;
        }

        entityFieldChangeCacheModel.oldValue = getOldValue();

        String oldValue = entityFieldChangeCacheModel.oldValue;

        if ((oldValue != null) && (oldValue.length() == 0)) {
            entityFieldChangeCacheModel.oldValue = null;
        }

        entityFieldChangeCacheModel.newValue = getNewValue();

        String newValue = entityFieldChangeCacheModel.newValue;

        if ((newValue != null) && (newValue.length() == 0)) {
            entityFieldChangeCacheModel.newValue = null;
        }

        return entityFieldChangeCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(11);

        sb.append("{fieldChangeId=");
        sb.append(getFieldChangeId());
        sb.append(", entryId=");
        sb.append(getEntryId());
        sb.append(", fieldName=");
        sb.append(getFieldName());
        sb.append(", oldValue=");
        sb.append(getOldValue());
        sb.append(", newValue=");
        sb.append(getNewValue());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(19);

        sb.append("<model><model-name>");
        sb.append("ru.akimov.model.EntityFieldChange");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>fieldChangeId</column-name><column-value><![CDATA[");
        sb.append(getFieldChangeId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>entryId</column-name><column-value><![CDATA[");
        sb.append(getEntryId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>fieldName</column-name><column-value><![CDATA[");
        sb.append(getFieldName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>oldValue</column-name><column-value><![CDATA[");
        sb.append(getOldValue());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>newValue</column-name><column-value><![CDATA[");
        sb.append(getNewValue());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
