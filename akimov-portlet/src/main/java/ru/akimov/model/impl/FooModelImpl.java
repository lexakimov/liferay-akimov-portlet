package ru.akimov.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import ru.akimov.model.Foo;
import ru.akimov.model.FooBlobFieldBlobModel;
import ru.akimov.model.FooModel;

import ru.akimov.service.FooLocalServiceUtil;

import java.io.Serializable;

import java.sql.Blob;
import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Foo service. Represents a row in the &quot;akimov_Foo&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ru.akimov.model.FooModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FooImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FooImpl
 * @see ru.akimov.model.Foo
 * @see ru.akimov.model.FooModel
 * @generated
 */
public class FooModelImpl extends BaseModelImpl<Foo> implements FooModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a foo model instance should use the {@link ru.akimov.model.Foo} interface instead.
     */
    public static final String TABLE_NAME = "akimov_Foo";
    public static final Object[][] TABLE_COLUMNS = {
            { "fooId", Types.INTEGER },
            { "booleanField", Types.BOOLEAN },
            { "shortField", Types.INTEGER },
            { "intField", Types.INTEGER },
            { "longField", Types.BIGINT },
            { "doubleField", Types.DOUBLE },
            { "floatField", Types.FLOAT },
            { "stringField", Types.VARCHAR },
            { "dateField", Types.TIMESTAMP },
            { "blobField", Types.BLOB },
            { "status", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table akimov_Foo (fooId INTEGER not null primary key,booleanField BOOLEAN,shortField INTEGER,intField INTEGER,longField LONG,doubleField DOUBLE,floatField DOUBLE,stringField VARCHAR(75) null,dateField DATE null,blobField BLOB,status INTEGER)";
    public static final String TABLE_SQL_DROP = "drop table akimov_Foo";
    public static final String ORDER_BY_JPQL = " ORDER BY foo.fooId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY akimov_Foo.fooId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.ru.akimov.model.Foo"), true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.ru.akimov.model.Foo"), true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.ru.akimov.model.Foo"));
    private static ClassLoader _classLoader = Foo.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Foo.class };
    private int _fooId;
    private boolean _booleanField;
    private short _shortField;
    private int _intField;
    private long _longField;
    private double _doubleField;
    private float _floatField;
    private String _stringField;
    private Date _dateField;
    private FooBlobFieldBlobModel _blobFieldBlobModel;
    private short _status;
    private Foo _escapedModel;

    public FooModelImpl() {
    }

    @Override
    public int getPrimaryKey() {
        return _fooId;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setFooId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _fooId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Foo.class;
    }

    @Override
    public String getModelClassName() {
        return Foo.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("fooId", getFooId());
        attributes.put("booleanField", getBooleanField());
        attributes.put("shortField", getShortField());
        attributes.put("intField", getIntField());
        attributes.put("longField", getLongField());
        attributes.put("doubleField", getDoubleField());
        attributes.put("floatField", getFloatField());
        attributes.put("stringField", getStringField());
        attributes.put("dateField", getDateField());
        attributes.put("blobField", getBlobField());
        attributes.put("status", getStatus());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Integer fooId = (Integer) attributes.get("fooId");

        if (fooId != null) {
            setFooId(fooId);
        }

        Boolean booleanField = (Boolean) attributes.get("booleanField");

        if (booleanField != null) {
            setBooleanField(booleanField);
        }

        Short shortField = (Short) attributes.get("shortField");

        if (shortField != null) {
            setShortField(shortField);
        }

        Integer intField = (Integer) attributes.get("intField");

        if (intField != null) {
            setIntField(intField);
        }

        Long longField = (Long) attributes.get("longField");

        if (longField != null) {
            setLongField(longField);
        }

        Double doubleField = (Double) attributes.get("doubleField");

        if (doubleField != null) {
            setDoubleField(doubleField);
        }

        Float floatField = (Float) attributes.get("floatField");

        if (floatField != null) {
            setFloatField(floatField);
        }

        String stringField = (String) attributes.get("stringField");

        if (stringField != null) {
            setStringField(stringField);
        }

        Date dateField = (Date) attributes.get("dateField");

        if (dateField != null) {
            setDateField(dateField);
        }

        Blob blobField = (Blob) attributes.get("blobField");

        if (blobField != null) {
            setBlobField(blobField);
        }

        Short status = (Short) attributes.get("status");

        if (status != null) {
            setStatus(status);
        }
    }

    @Override
    public int getFooId() {
        return _fooId;
    }

    @Override
    public void setFooId(int fooId) {
        _fooId = fooId;
    }

    @Override
    public boolean getBooleanField() {
        return _booleanField;
    }

    @Override
    public boolean isBooleanField() {
        return _booleanField;
    }

    @Override
    public void setBooleanField(boolean booleanField) {
        _booleanField = booleanField;
    }

    @Override
    public short getShortField() {
        return _shortField;
    }

    @Override
    public void setShortField(short shortField) {
        _shortField = shortField;
    }

    @Override
    public int getIntField() {
        return _intField;
    }

    @Override
    public void setIntField(int intField) {
        _intField = intField;
    }

    @Override
    public long getLongField() {
        return _longField;
    }

    @Override
    public void setLongField(long longField) {
        _longField = longField;
    }

    @Override
    public double getDoubleField() {
        return _doubleField;
    }

    @Override
    public void setDoubleField(double doubleField) {
        _doubleField = doubleField;
    }

    @Override
    public float getFloatField() {
        return _floatField;
    }

    @Override
    public void setFloatField(float floatField) {
        _floatField = floatField;
    }

    @Override
    public String getStringField() {
        if (_stringField == null) {
            return StringPool.BLANK;
        } else {
            return _stringField;
        }
    }

    @Override
    public void setStringField(String stringField) {
        _stringField = stringField;
    }

    @Override
    public Date getDateField() {
        return _dateField;
    }

    @Override
    public void setDateField(Date dateField) {
        _dateField = dateField;
    }

    @Override
    public Blob getBlobField() {
        if (_blobFieldBlobModel == null) {
            try {
                _blobFieldBlobModel = FooLocalServiceUtil.getBlobFieldBlobModel(getPrimaryKey());
            } catch (Exception e) {
            }
        }

        Blob blob = null;

        if (_blobFieldBlobModel != null) {
            blob = _blobFieldBlobModel.getBlobFieldBlob();
        }

        return blob;
    }

    @Override
    public void setBlobField(Blob blobField) {
        if (_blobFieldBlobModel == null) {
            _blobFieldBlobModel = new FooBlobFieldBlobModel(getPrimaryKey(),
                    blobField);
        } else {
            _blobFieldBlobModel.setBlobFieldBlob(blobField);
        }
    }

    @Override
    public short getStatus() {
        return _status;
    }

    @Override
    public void setStatus(short status) {
        _status = status;
    }

    @Override
    public Foo toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Foo) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        FooImpl fooImpl = new FooImpl();

        fooImpl.setFooId(getFooId());
        fooImpl.setBooleanField(getBooleanField());
        fooImpl.setShortField(getShortField());
        fooImpl.setIntField(getIntField());
        fooImpl.setLongField(getLongField());
        fooImpl.setDoubleField(getDoubleField());
        fooImpl.setFloatField(getFloatField());
        fooImpl.setStringField(getStringField());
        fooImpl.setDateField(getDateField());
        fooImpl.setStatus(getStatus());

        fooImpl.resetOriginalValues();

        return fooImpl;
    }

    @Override
    public int compareTo(Foo foo) {
        int primaryKey = foo.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Foo)) {
            return false;
        }

        Foo foo = (Foo) obj;

        int primaryKey = foo.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        FooModelImpl fooModelImpl = this;

        fooModelImpl._blobFieldBlobModel = null;
    }

    @Override
    public CacheModel<Foo> toCacheModel() {
        FooCacheModel fooCacheModel = new FooCacheModel();

        fooCacheModel.fooId = getFooId();

        fooCacheModel.booleanField = getBooleanField();

        fooCacheModel.shortField = getShortField();

        fooCacheModel.intField = getIntField();

        fooCacheModel.longField = getLongField();

        fooCacheModel.doubleField = getDoubleField();

        fooCacheModel.floatField = getFloatField();

        fooCacheModel.stringField = getStringField();

        String stringField = fooCacheModel.stringField;

        if ((stringField != null) && (stringField.length() == 0)) {
            fooCacheModel.stringField = null;
        }

        Date dateField = getDateField();

        if (dateField != null) {
            fooCacheModel.dateField = dateField.getTime();
        } else {
            fooCacheModel.dateField = Long.MIN_VALUE;
        }

        fooCacheModel.status = getStatus();

        return fooCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(23);

        sb.append("{fooId=");
        sb.append(getFooId());
        sb.append(", booleanField=");
        sb.append(getBooleanField());
        sb.append(", shortField=");
        sb.append(getShortField());
        sb.append(", intField=");
        sb.append(getIntField());
        sb.append(", longField=");
        sb.append(getLongField());
        sb.append(", doubleField=");
        sb.append(getDoubleField());
        sb.append(", floatField=");
        sb.append(getFloatField());
        sb.append(", stringField=");
        sb.append(getStringField());
        sb.append(", dateField=");
        sb.append(getDateField());
        sb.append(", status=");
        sb.append(getStatus());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(37);

        sb.append("<model><model-name>");
        sb.append("ru.akimov.model.Foo");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>fooId</column-name><column-value><![CDATA[");
        sb.append(getFooId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>booleanField</column-name><column-value><![CDATA[");
        sb.append(getBooleanField());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>shortField</column-name><column-value><![CDATA[");
        sb.append(getShortField());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>intField</column-name><column-value><![CDATA[");
        sb.append(getIntField());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>longField</column-name><column-value><![CDATA[");
        sb.append(getLongField());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>doubleField</column-name><column-value><![CDATA[");
        sb.append(getDoubleField());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>floatField</column-name><column-value><![CDATA[");
        sb.append(getFloatField());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>stringField</column-name><column-value><![CDATA[");
        sb.append(getStringField());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>dateField</column-name><column-value><![CDATA[");
        sb.append(getDateField());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>status</column-name><column-value><![CDATA[");
        sb.append(getStatus());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
