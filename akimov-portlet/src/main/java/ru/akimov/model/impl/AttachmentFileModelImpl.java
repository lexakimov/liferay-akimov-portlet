package ru.akimov.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import ru.akimov.model.AttachmentFile;
import ru.akimov.model.AttachmentFileDataBlobModel;
import ru.akimov.model.AttachmentFileModel;

import ru.akimov.service.AttachmentFileLocalServiceUtil;

import java.io.Serializable;

import java.sql.Blob;
import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the AttachmentFile service. Represents a row in the &quot;akimov_attachment_files&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ru.akimov.model.AttachmentFileModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AttachmentFileImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AttachmentFileImpl
 * @see ru.akimov.model.AttachmentFile
 * @see ru.akimov.model.AttachmentFileModel
 * @generated
 */
public class AttachmentFileModelImpl extends BaseModelImpl<AttachmentFile>
    implements AttachmentFileModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a attachment file model instance should use the {@link ru.akimov.model.AttachmentFile} interface instead.
     */
    public static final String TABLE_NAME = "akimov_attachment_files";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.INTEGER },
            { "fileName", Types.CLOB },
            { "extension", Types.VARCHAR },
            { "size_", Types.INTEGER },
            { "mimeType", Types.VARCHAR },
            { "data_", Types.BLOB },
            { "uploaded", Types.TIMESTAMP },
            { "userId", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table akimov_attachment_files (id_ INTEGER not null primary key,fileName TEXT null,extension VARCHAR(75) null,size_ INTEGER,mimeType VARCHAR(75) null,data_ BLOB,uploaded DATE null,userId INTEGER)";
    public static final String TABLE_SQL_DROP = "drop table akimov_attachment_files";
    public static final String ORDER_BY_JPQL = " ORDER BY attachmentFile.id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY akimov_attachment_files.id_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.ru.akimov.model.AttachmentFile"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.ru.akimov.model.AttachmentFile"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.ru.akimov.model.AttachmentFile"));
    private static ClassLoader _classLoader = AttachmentFile.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            AttachmentFile.class
        };
    private int _id;
    private String _fileName;
    private String _extension;
    private int _size;
    private String _mimeType;
    private AttachmentFileDataBlobModel _dataBlobModel;
    private Date _uploaded;
    private int _userId;
    private AttachmentFile _escapedModel;

    public AttachmentFileModelImpl() {
    }

    @Override
    public int getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return AttachmentFile.class;
    }

    @Override
    public String getModelClassName() {
        return AttachmentFile.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("fileName", getFileName());
        attributes.put("extension", getExtension());
        attributes.put("size", getSize());
        attributes.put("mimeType", getMimeType());
        attributes.put("data", getData());
        attributes.put("uploaded", getUploaded());
        attributes.put("userId", getUserId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Integer id = (Integer) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        String fileName = (String) attributes.get("fileName");

        if (fileName != null) {
            setFileName(fileName);
        }

        String extension = (String) attributes.get("extension");

        if (extension != null) {
            setExtension(extension);
        }

        Integer size = (Integer) attributes.get("size");

        if (size != null) {
            setSize(size);
        }

        String mimeType = (String) attributes.get("mimeType");

        if (mimeType != null) {
            setMimeType(mimeType);
        }

        Blob data = (Blob) attributes.get("data");

        if (data != null) {
            setData(data);
        }

        Date uploaded = (Date) attributes.get("uploaded");

        if (uploaded != null) {
            setUploaded(uploaded);
        }

        Integer userId = (Integer) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }
    }

    @Override
    public int getId() {
        return _id;
    }

    @Override
    public void setId(int id) {
        _id = id;
    }

    @Override
    public String getFileName() {
        if (_fileName == null) {
            return StringPool.BLANK;
        } else {
            return _fileName;
        }
    }

    @Override
    public void setFileName(String fileName) {
        _fileName = fileName;
    }

    @Override
    public String getExtension() {
        if (_extension == null) {
            return StringPool.BLANK;
        } else {
            return _extension;
        }
    }

    @Override
    public void setExtension(String extension) {
        _extension = extension;
    }

    @Override
    public int getSize() {
        return _size;
    }

    @Override
    public void setSize(int size) {
        _size = size;
    }

    @Override
    public String getMimeType() {
        if (_mimeType == null) {
            return StringPool.BLANK;
        } else {
            return _mimeType;
        }
    }

    @Override
    public void setMimeType(String mimeType) {
        _mimeType = mimeType;
    }

    @Override
    public Blob getData() {
        if (_dataBlobModel == null) {
            try {
                _dataBlobModel = AttachmentFileLocalServiceUtil.getDataBlobModel(getPrimaryKey());
            } catch (Exception e) {
            }
        }

        Blob blob = null;

        if (_dataBlobModel != null) {
            blob = _dataBlobModel.getDataBlob();
        }

        return blob;
    }

    @Override
    public void setData(Blob data) {
        if (_dataBlobModel == null) {
            _dataBlobModel = new AttachmentFileDataBlobModel(getPrimaryKey(),
                    data);
        } else {
            _dataBlobModel.setDataBlob(data);
        }
    }

    @Override
    public Date getUploaded() {
        return _uploaded;
    }

    @Override
    public void setUploaded(Date uploaded) {
        _uploaded = uploaded;
    }

    @Override
    public int getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(int userId) {
        _userId = userId;
    }

    @Override
    public AttachmentFile toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (AttachmentFile) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        AttachmentFileImpl attachmentFileImpl = new AttachmentFileImpl();

        attachmentFileImpl.setId(getId());
        attachmentFileImpl.setFileName(getFileName());
        attachmentFileImpl.setExtension(getExtension());
        attachmentFileImpl.setSize(getSize());
        attachmentFileImpl.setMimeType(getMimeType());
        attachmentFileImpl.setUploaded(getUploaded());
        attachmentFileImpl.setUserId(getUserId());

        attachmentFileImpl.resetOriginalValues();

        return attachmentFileImpl;
    }

    @Override
    public int compareTo(AttachmentFile attachmentFile) {
        int primaryKey = attachmentFile.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof AttachmentFile)) {
            return false;
        }

        AttachmentFile attachmentFile = (AttachmentFile) obj;

        int primaryKey = attachmentFile.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        AttachmentFileModelImpl attachmentFileModelImpl = this;

        attachmentFileModelImpl._dataBlobModel = null;
    }

    @Override
    public CacheModel<AttachmentFile> toCacheModel() {
        AttachmentFileCacheModel attachmentFileCacheModel = new AttachmentFileCacheModel();

        attachmentFileCacheModel.id = getId();

        attachmentFileCacheModel.fileName = getFileName();

        String fileName = attachmentFileCacheModel.fileName;

        if ((fileName != null) && (fileName.length() == 0)) {
            attachmentFileCacheModel.fileName = null;
        }

        attachmentFileCacheModel.extension = getExtension();

        String extension = attachmentFileCacheModel.extension;

        if ((extension != null) && (extension.length() == 0)) {
            attachmentFileCacheModel.extension = null;
        }

        attachmentFileCacheModel.size = getSize();

        attachmentFileCacheModel.mimeType = getMimeType();

        String mimeType = attachmentFileCacheModel.mimeType;

        if ((mimeType != null) && (mimeType.length() == 0)) {
            attachmentFileCacheModel.mimeType = null;
        }

        Date uploaded = getUploaded();

        if (uploaded != null) {
            attachmentFileCacheModel.uploaded = uploaded.getTime();
        } else {
            attachmentFileCacheModel.uploaded = Long.MIN_VALUE;
        }

        attachmentFileCacheModel.userId = getUserId();

        return attachmentFileCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(17);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", fileName=");
        sb.append(getFileName());
        sb.append(", extension=");
        sb.append(getExtension());
        sb.append(", size=");
        sb.append(getSize());
        sb.append(", mimeType=");
        sb.append(getMimeType());
        sb.append(", uploaded=");
        sb.append(getUploaded());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(28);

        sb.append("<model><model-name>");
        sb.append("ru.akimov.model.AttachmentFile");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>fileName</column-name><column-value><![CDATA[");
        sb.append(getFileName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>extension</column-name><column-value><![CDATA[");
        sb.append(getExtension());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>size</column-name><column-value><![CDATA[");
        sb.append(getSize());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>mimeType</column-name><column-value><![CDATA[");
        sb.append(getMimeType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>uploaded</column-name><column-value><![CDATA[");
        sb.append(getUploaded());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
