package ru.akimov.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import ru.akimov.model.Person;
import ru.akimov.model.PersonModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Person service. Represents a row in the &quot;akimov_Person&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ru.akimov.model.PersonModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PersonImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PersonImpl
 * @see ru.akimov.model.Person
 * @see ru.akimov.model.PersonModel
 * @generated
 */
public class PersonModelImpl extends BaseModelImpl<Person>
    implements PersonModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a person model instance should use the {@link ru.akimov.model.Person} interface instead.
     */
    public static final String TABLE_NAME = "akimov_Person";
    public static final Object[][] TABLE_COLUMNS = {
            { "personId", Types.INTEGER },
            { "lastName", Types.VARCHAR },
            { "firstName", Types.VARCHAR },
            { "middleName", Types.VARCHAR },
            { "gender", Types.INTEGER },
            { "birthDate", Types.TIMESTAMP },
            { "address", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table akimov_Person (personId INTEGER not null primary key,lastName VARCHAR(75) null,firstName VARCHAR(75) null,middleName VARCHAR(75) null,gender INTEGER,birthDate DATE null,address VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table akimov_Person";
    public static final String ORDER_BY_JPQL = " ORDER BY person.personId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY akimov_Person.personId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.ru.akimov.model.Person"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.ru.akimov.model.Person"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.ru.akimov.model.Person"));
    private static ClassLoader _classLoader = Person.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Person.class };
    private int _personId;
    private String _lastName;
    private String _firstName;
    private String _middleName;
    private int _gender;
    private Date _birthDate;
    private String _address;
    private Person _escapedModel;

    public PersonModelImpl() {
    }

    @Override
    public int getPrimaryKey() {
        return _personId;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setPersonId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _personId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Person.class;
    }

    @Override
    public String getModelClassName() {
        return Person.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("personId", getPersonId());
        attributes.put("lastName", getLastName());
        attributes.put("firstName", getFirstName());
        attributes.put("middleName", getMiddleName());
        attributes.put("gender", getGender());
        attributes.put("birthDate", getBirthDate());
        attributes.put("address", getAddress());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Integer personId = (Integer) attributes.get("personId");

        if (personId != null) {
            setPersonId(personId);
        }

        String lastName = (String) attributes.get("lastName");

        if (lastName != null) {
            setLastName(lastName);
        }

        String firstName = (String) attributes.get("firstName");

        if (firstName != null) {
            setFirstName(firstName);
        }

        String middleName = (String) attributes.get("middleName");

        if (middleName != null) {
            setMiddleName(middleName);
        }

        Integer gender = (Integer) attributes.get("gender");

        if (gender != null) {
            setGender(gender);
        }

        Date birthDate = (Date) attributes.get("birthDate");

        if (birthDate != null) {
            setBirthDate(birthDate);
        }

        String address = (String) attributes.get("address");

        if (address != null) {
            setAddress(address);
        }
    }

    @Override
    public int getPersonId() {
        return _personId;
    }

    @Override
    public void setPersonId(int personId) {
        _personId = personId;
    }

    @Override
    public String getLastName() {
        if (_lastName == null) {
            return StringPool.BLANK;
        } else {
            return _lastName;
        }
    }

    @Override
    public void setLastName(String lastName) {
        _lastName = lastName;
    }

    @Override
    public String getFirstName() {
        if (_firstName == null) {
            return StringPool.BLANK;
        } else {
            return _firstName;
        }
    }

    @Override
    public void setFirstName(String firstName) {
        _firstName = firstName;
    }

    @Override
    public String getMiddleName() {
        if (_middleName == null) {
            return StringPool.BLANK;
        } else {
            return _middleName;
        }
    }

    @Override
    public void setMiddleName(String middleName) {
        _middleName = middleName;
    }

    @Override
    public int getGender() {
        return _gender;
    }

    @Override
    public void setGender(int gender) {
        _gender = gender;
    }

    @Override
    public Date getBirthDate() {
        return _birthDate;
    }

    @Override
    public void setBirthDate(Date birthDate) {
        _birthDate = birthDate;
    }

    @Override
    public String getAddress() {
        if (_address == null) {
            return StringPool.BLANK;
        } else {
            return _address;
        }
    }

    @Override
    public void setAddress(String address) {
        _address = address;
    }

    @Override
    public Person toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Person) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        PersonImpl personImpl = new PersonImpl();

        personImpl.setPersonId(getPersonId());
        personImpl.setLastName(getLastName());
        personImpl.setFirstName(getFirstName());
        personImpl.setMiddleName(getMiddleName());
        personImpl.setGender(getGender());
        personImpl.setBirthDate(getBirthDate());
        personImpl.setAddress(getAddress());

        personImpl.resetOriginalValues();

        return personImpl;
    }

    @Override
    public int compareTo(Person person) {
        int primaryKey = person.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Person)) {
            return false;
        }

        Person person = (Person) obj;

        int primaryKey = person.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<Person> toCacheModel() {
        PersonCacheModel personCacheModel = new PersonCacheModel();

        personCacheModel.personId = getPersonId();

        personCacheModel.lastName = getLastName();

        String lastName = personCacheModel.lastName;

        if ((lastName != null) && (lastName.length() == 0)) {
            personCacheModel.lastName = null;
        }

        personCacheModel.firstName = getFirstName();

        String firstName = personCacheModel.firstName;

        if ((firstName != null) && (firstName.length() == 0)) {
            personCacheModel.firstName = null;
        }

        personCacheModel.middleName = getMiddleName();

        String middleName = personCacheModel.middleName;

        if ((middleName != null) && (middleName.length() == 0)) {
            personCacheModel.middleName = null;
        }

        personCacheModel.gender = getGender();

        Date birthDate = getBirthDate();

        if (birthDate != null) {
            personCacheModel.birthDate = birthDate.getTime();
        } else {
            personCacheModel.birthDate = Long.MIN_VALUE;
        }

        personCacheModel.address = getAddress();

        String address = personCacheModel.address;

        if ((address != null) && (address.length() == 0)) {
            personCacheModel.address = null;
        }

        return personCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(15);

        sb.append("{personId=");
        sb.append(getPersonId());
        sb.append(", lastName=");
        sb.append(getLastName());
        sb.append(", firstName=");
        sb.append(getFirstName());
        sb.append(", middleName=");
        sb.append(getMiddleName());
        sb.append(", gender=");
        sb.append(getGender());
        sb.append(", birthDate=");
        sb.append(getBirthDate());
        sb.append(", address=");
        sb.append(getAddress());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(25);

        sb.append("<model><model-name>");
        sb.append("ru.akimov.model.Person");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>personId</column-name><column-value><![CDATA[");
        sb.append(getPersonId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lastName</column-name><column-value><![CDATA[");
        sb.append(getLastName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>firstName</column-name><column-value><![CDATA[");
        sb.append(getFirstName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>middleName</column-name><column-value><![CDATA[");
        sb.append(getMiddleName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>gender</column-name><column-value><![CDATA[");
        sb.append(getGender());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>birthDate</column-name><column-value><![CDATA[");
        sb.append(getBirthDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>address</column-name><column-value><![CDATA[");
        sb.append(getAddress());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
